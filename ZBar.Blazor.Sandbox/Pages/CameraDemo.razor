@page "/camera"
@using ZBar.Blazor.Dtos

<PageTitle>ZBarCamera</PageTitle>
<div class="page">
    <ZBarCamera @ref="Camera" AutoScan="@AutoScan" Verbose="@Verbose" CameraViewType="@CameraView" OnBarcodesFound="OnBarcodesFound" />
    <div class="tools">
        <div class="section">
            <button class="btn btn-primary" @onclick="StartVideoFeed">Start</button>
            <button class="btn btn-danger" @onclick="EndVideoFeed">Stop</button>
            <select class="form-select" @bind="@SelectedHardwareDeviceId">
                <option selected disabled>Select a video device</option>
                @if (AvailableHardwareDevices != null)
                {
                    @foreach (var device in AvailableHardwareDevices)
                    {
                        <option value="@device.Id">@device.Name</option>
                    }
                }
            </select>
        </div>
        <div class="section">
            <label class="form-check-label description">Auto Scan:</label>
            <div class="radioSelection">
                <div>
                    <input class="form-check-input" type="radio" name="autoScan" id="AutoScanOn" checked="@AutoScan" @onchange="@(() => AutoScan = true)">
                    <label class="form-check-label" for="AutoScanOn">On</label>
                </div>
                <div>
                    <input class="form-check-input" type="radio" name="autoScan" id="AutoScanOff" checked="@(!AutoScan)" @onchange="@(() => AutoScan = false)">
                    <label class="form-check-label" for="AutoScanOff">Off</label>
                </div>
            </div>
            <label class="form-check-label description" style="margin-left: 8px;">Verbose:</label>
            <div class="radioSelection">
                <div>
                    <input class="form-check-input" type="radio" name="verbose" id="VerboseOn" checked="@Verbose" @onchange="@(() => Verbose = true)">
                    <label class="form-check-label" for="VerboseOn">On</label>
                </div>
                <div>
                    <input class="form-check-input" type="radio" name="verbose" id="VerboseOff" checked="@(!Verbose)" @onchange="@(() => Verbose = false)">
                    <label class="form-check-label" for="VerboseOff">Off</label>
                </div>
            </div>
        </div>
        <div class="section">
            <label class="form-check-label description">Camera View Type:</label>
            <div class="radioSelection">
                <div>
                    <input class="form-check-input" type="radio" name="cameraViewType" id="CameraViewTypeVideoFeed" checked="@(CameraView == CameraViewType.VideoFeed)" @onchange="@(() => CameraView = CameraViewType.VideoFeed)">
                    <label class="form-check-label" for="CameraViewTypeVideoFeed">Video Feed</label>
                </div>
                <div>
                    <input class="form-check-input" type="radio" name="cameraViewType" id="CameraViewTypeScannerFeed" checked="@(CameraView == CameraViewType.ScannerFeed)" @onchange="@(() => CameraView = CameraViewType.ScannerFeed)">
                    <label class="form-check-label" for="CameraViewTypeScannerFeed">Scanner Feed</label>
                </div>
                <div>
                    <input class="form-check-input" type="radio" name="cameraViewType" id="CameraViewTypeNone" checked="@(CameraView == CameraViewType.None)" @onchange="@(() => CameraView = CameraViewType.None)">
                    <label class="form-check-label" for="CameraViewTypeNone">None</label>
                </div>
            </div>
        </div>
        <div class="section foundBarcodes">
            <h5>Found Barcodes</h5>
            <div class="barcodes">
                @if (FoundBarcodes != null)
                {
                    foreach (var barcode in FoundBarcodes)
                    {
                        <div class="barcode">
                            <div class="type">@barcode.Type</div>
                            <div class="value">@barcode.Value</div>
                        </div>
                    }
                }
                else
                {
                    <div class="none">None Found</div>
                }
            </div>
        </div>
    </div>
</div>

@code {
    private ZBarCamera Camera;

    private bool AutoScan { get; set; } = true;
    private bool Verbose { get; set; } = true;
    private CameraViewType CameraView { get; set; } = CameraViewType.VideoFeed;

    private HardwareDevice[] AvailableHardwareDevices;
    private string SelectedHardwareDeviceId;

    private Barcode[] FoundBarcodes;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender) {
            AvailableHardwareDevices = await Camera.GetAvailableDevices();
            StateHasChanged();
        }
    }

    private async Task StartVideoFeed()
    {
        if (SelectedHardwareDeviceId != null) {
            await Camera.StartVideoFeed(SelectedHardwareDeviceId);
        }
    }

    private async Task EndVideoFeed()
    {
        await Camera.EndVideoFeed();
    }

    private void OnBarcodesFound(ScanResult scanResult)
    {
        FoundBarcodes = scanResult.Barcodes;
        StateHasChanged();
    }
}